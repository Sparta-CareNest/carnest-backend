plugins {
    id 'java-library' // API vs implementation 분리를 위해 꼭 필요
}

ext {
    set('springCloudVersion', "2024.0.0")
    set('querydslVersion', "5.0.0")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // 공통으로 사용할 Spring Boot 라이브러리 - 다른 모듈에서도 사용할 수 있게 api 사용
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    api 'org.springframework.boot:spring-boot-starter-validation'
    api 'org.springframework.boot:spring-boot-starter-web'

    // monitor
    api 'org.springframework.boot:spring-boot-starter-actuator'
    api 'io.micrometer:micrometer-registry-prometheus'

    // QueryDSL
    api "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Lombok (컴파일 전용)
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // 테스트 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-clients'
}

// Lombok 등의 annotation processor 경로 명시
tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorPath = configurations.annotationProcessor
}

// 공통 모듈은 실행 가능한 jar가 아니므로 bootJar 비활성화
bootJar {
    enabled = false
}