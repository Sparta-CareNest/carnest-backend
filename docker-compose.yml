services:
#  eureka-server:
#    build:
#      context: .
#      dockerfile: ./eureka-service/Dockerfile
#    ports:
#      - "8761:8761"
#    networks:
#      - app-network
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#  gateway-server:
#    build:
#      context: .
#      dockerfile: ./gateway-service/Dockerfile
#    ports:
#      - "8000:8000"
#    networks:
#      - app-network
#    depends_on:
#      eureka-server:
#        condition: service_healthy
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8000/actuator/health" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    platform: linux/amd64
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    platform: linux/amd64
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    platform: linux/amd64
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_READONLY: "false"

networks:
  app-network:
    driver: bridge